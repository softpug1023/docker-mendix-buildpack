// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Shows a toast, providing most options exposed by the react-toastify library. Returns the ID of the toast shown, to be used in dismiss or update calls.
 * @param {string} message
 * @param {Big} autoClose - timeout to autoclose the toast (in ms) - Empty means default, zero means never
 * @param {"Toastify.ENU_ToastType.info"|"Toastify.ENU_ToastType.success"|"Toastify.ENU_ToastType.warning"|"Toastify.ENU_ToastType.error"|"Toastify.ENU_ToastType._default"} toastType - type of toast
 * @param {"Toastify.ENU_Position.TOP_LEFT"|"Toastify.ENU_Position.TOP_RIGHT"|"Toastify.ENU_Position.TOP_CENTER"|"Toastify.ENU_Position.BOTTOM_LEFT"|"Toastify.ENU_Position.BOTTOM_RIGHT"} position - position of the toast
 * @param {boolean} hideProgressBar - optionally hide the progress bar
 * @param {boolean} pauseOnHover - pause the progress bar on hover
 * @param {boolean} pauseOnFocusLoss - pause the timer when the browser window loses focus
 * @param {boolean} closeOnClick - close the toast on click
 * @param {string} className - additional classes for the toast container
 * @param {string} progressClassName - additional classes for the progress bar
 * @param {boolean} draggable - Toast is draggable
 * @param {Big} draggablePercent - The percentage of the toast's width it takes for a drag to dismiss a toast(value between 0 and 100)
 * @param {"Toastify.ENU_DraggableDirection.x"|"Toastify.ENU_DraggableDirection.y"} draggableDirection - axis on which to drag the toast
 * @param {string} role - ARIA role for toasts
 * @param {Big} delay - delay the toast appearance. Pass a value in ms
 * @param {Nanoflow} [onClick] - called when click inside Toast notification
 * @returns {Promise.<string>}
 */
export async function ShowToast_Advanced(message, autoClose, toastType, position, hideProgressBar, pauseOnHover, pauseOnFocusLoss, closeOnClick, className, progressClassName, draggable, draggablePercent, draggableDirection, role, delay, onClick) {
	// BEGIN USER CODE

	const autoCloseValue = Number(autoClose) !== 0 ? autoClose : false

	const options = {
		//onOpen: props => console.log(props.foo),
		//onClose: props => console.log(props.foo),
		autoClose:autoCloseValue,
		//closeButton: FontAwesomeCloseButton,
		type: toastType,
		hideProgressBar,
		position: window.toast.POSITION[position],
		pauseOnHover,
		pauseOnFocusLoss,
		closeOnClick,
		className,
		progressClassName,
		draggable,
		draggablePercent: Number(draggablePercent),
		draggableDirection,
		role,
		delay: Number(delay),
		onClick: () => onClick()
		//transition
	};

	window.toast(message, options);
	// END USER CODE
}
